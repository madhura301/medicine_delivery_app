// <auto-generated />
using System;
using MedicineDelivery.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicineDelivery.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ClearRolePermissionsDataModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AlternativeMobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerMiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerSupport", b =>
                {
                    b.Property<Guid>("CustomerSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerSupportFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CustomerSupportId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerSupports");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.MedicalStore", b =>
                {
                    b.Property<Guid>("MedicalStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DLNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FSSAINo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GSTIN")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("MedicalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("OwnerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PAN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PharmacistRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("RegistrationStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("MedicalStoreId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalStores");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(681),
                            Description = "Can view user information",
                            IsActive = true,
                            Module = "Users",
                            Name = "ReadUsers"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(683),
                            Description = "Can create new users",
                            IsActive = true,
                            Module = "Users",
                            Name = "CreateUsers"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(684),
                            Description = "Can update user information",
                            IsActive = true,
                            Module = "Users",
                            Name = "UpdateUsers"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(685),
                            Description = "Can delete users",
                            IsActive = true,
                            Module = "Users",
                            Name = "DeleteUsers"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(687),
                            Description = "Can view products",
                            IsActive = true,
                            Module = "Products",
                            Name = "ReadProducts"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(688),
                            Description = "Can create new products",
                            IsActive = true,
                            Module = "Products",
                            Name = "CreateProducts"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(690),
                            Description = "Can update products",
                            IsActive = true,
                            Module = "Products",
                            Name = "UpdateProducts"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(691),
                            Description = "Can delete products",
                            IsActive = true,
                            Module = "Products",
                            Name = "DeleteProducts"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(692),
                            Description = "Can view orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "ReadOrders"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(693),
                            Description = "Can create new orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "CreateOrders"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(694),
                            Description = "Can update orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "UpdateOrders"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(695),
                            Description = "Can delete orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "DeleteOrders"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(697),
                            Description = "Admin can view all user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminReadUsers"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(698),
                            Description = "Admin can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminCreateUsers"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(699),
                            Description = "Admin can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminUpdateUsers"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(700),
                            Description = "Admin can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminDeleteUsers"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(704),
                            Description = "Manager can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerReadUsers"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(705),
                            Description = "Manager can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerCreateUsers"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(706),
                            Description = "Manager can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerUpdateUsers"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(707),
                            Description = "Manager can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerDeleteUsers"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(708),
                            Description = "CustomerSupport can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportReadUsers"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(710),
                            Description = "CustomerSupport can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportCreateUsers"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(712),
                            Description = "CustomerSupport can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportUpdateUsers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(713),
                            Description = "CustomerSupport can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportDeleteUsers"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(714),
                            Description = "Chemist can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistReadUsers"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(715),
                            Description = "Chemist can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistCreateUsers"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(716),
                            Description = "Chemist can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistUpdateUsers"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(717),
                            Description = "Chemist can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistDeleteUsers"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(719),
                            Description = "Can manage role permissions",
                            IsActive = true,
                            Module = "RoleManagement",
                            Name = "ManageRolePermission"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(720),
                            Description = "Can read chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistRead"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(721),
                            Description = "Can create chemist accounts",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistCreate"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(722),
                            Description = "Can update chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistUpdate"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(724),
                            Description = "Can delete chemist accounts",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistDelete"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(725),
                            Description = "Can read customer support information",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportRead"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(726),
                            Description = "Can create customer support accounts",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportCreate"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(728),
                            Description = "Can update customer support information",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportUpdate"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(729),
                            Description = "Can delete customer support accounts",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportDelete"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(730),
                            Description = "Can read manager information",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportRead"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(731),
                            Description = "Can create manager accounts",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportCreate"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(733),
                            Description = "Can update manager information",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportUpdate"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(734),
                            Description = "Can delete manager accounts",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportDelete"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(735),
                            Description = "Can read own customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerRead"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(736),
                            Description = "Can create customer accounts",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerCreate"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(737),
                            Description = "Can update own customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerUpdate"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(738),
                            Description = "Can delete own customer account",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerDelete"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(739),
                            Description = "Can read all customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerRead"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(741),
                            Description = "Can update any customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerUpdate"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(742),
                            Description = "Can delete any customer account",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerDelete"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(743),
                            Description = "Can read all Chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistRead"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(744),
                            Description = "Can update any Chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistUpdate"
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(746),
                            Description = "Can delete any Chemist account",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistDelete"
                        });
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrantedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "1",
                            PermissionId = 1,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1027),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 2,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1029),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 3,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1031),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 4,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1032),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1033),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 6,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1033),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1034),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 8,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1036),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1037),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1038),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1038),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 12,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1039),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 13,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1040),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 14,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1041),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 15,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1042),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 16,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1043),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 17,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1044),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 18,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1045),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 19,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1046),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 20,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1046),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1047),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1048),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1049),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1050),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1052),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1052),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1053),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1054),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 29,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1055),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1056),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1057),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1058),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1058),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1059),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 35,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1060),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1061),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1062),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 38,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1063),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 39,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1064),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 40,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1064),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 41,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1065),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1066),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1067),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1068),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1069),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1069),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1070),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "1",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1072),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 1,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1073),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 3,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1074),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1074),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1075),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1076),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1077),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 17,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1078),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 18,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1079),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 19,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1079),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 20,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1080),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1081),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1082),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1083),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1084),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1084),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1085),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1086),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1087),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1088),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1089),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1089),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1090),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1092),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 35,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1093),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1094),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1094),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 38,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1095),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 40,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1096),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 41,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1097),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1097),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1098),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1099),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1100),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1101),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1102),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "2",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1102),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1103),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1104),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1105),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1106),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1106),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1107),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1108),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1109),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1110),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1111),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1112),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1113),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1114),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1115),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1115),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1116),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1117),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1145),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1146),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1147),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1148),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1149),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1150),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1151),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "3",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1152),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1153),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1153),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1154),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 42,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1155),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 44,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1156),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "4",
                            PermissionId = 45,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1157),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1158),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 6,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1159),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1160),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 8,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1160),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1161),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1162),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1163),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 12,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1164),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1165),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1165),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "5",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 4, 11, 55, 10, 896, DateTimeKind.Utc).AddTicks(1166),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "CustomerSupport",
                            NormalizedName = "CUSTOMERSUPPORT"
                        },
                        new
                        {
                            Id = "4",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "5",
                            Name = "Chemist",
                            NormalizedName = "CHEMIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerSupport", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Manager", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.MedicalStore", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicineDelivery.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
