// <auto-generated />
using System;
using MedicineDelivery.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MedicineDelivery.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005174529_UpdateRoleDataWithGuids")]
    partial class UpdateRoleDataWithGuids
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AlternativeMobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerMiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerPhoto")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressLine3")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerSupport", b =>
                {
                    b.Property<Guid>("CustomerSupportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerSupportFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CustomerSupportPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("CustomerSupportId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerSupports");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Manager", b =>
                {
                    b.Property<Guid>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ManagerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ManagerPhoto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.MedicalStore", b =>
                {
                    b.Property<Guid>("MedicalStoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("AlternativeMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DLNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FSSAINo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GSTIN")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("MedicalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("OwnerFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OwnerMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PAN")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PharmacistMobileNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("PharmacistRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("RegistrationStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("MedicalStoreId");

                    b.HasIndex("UserId");

                    b.ToTable("MedicalStores");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2814),
                            Description = "Can view user information",
                            IsActive = true,
                            Module = "Users",
                            Name = "ReadUsers"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2816),
                            Description = "Can create new users",
                            IsActive = true,
                            Module = "Users",
                            Name = "CreateUsers"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2817),
                            Description = "Can update user information",
                            IsActive = true,
                            Module = "Users",
                            Name = "UpdateUsers"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2819),
                            Description = "Can delete users",
                            IsActive = true,
                            Module = "Users",
                            Name = "DeleteUsers"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2820),
                            Description = "Can view products",
                            IsActive = true,
                            Module = "Products",
                            Name = "ReadProducts"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2821),
                            Description = "Can create new products",
                            IsActive = true,
                            Module = "Products",
                            Name = "CreateProducts"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2822),
                            Description = "Can update products",
                            IsActive = true,
                            Module = "Products",
                            Name = "UpdateProducts"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2823),
                            Description = "Can delete products",
                            IsActive = true,
                            Module = "Products",
                            Name = "DeleteProducts"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2824),
                            Description = "Can view orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "ReadOrders"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2825),
                            Description = "Can create new orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "CreateOrders"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2826),
                            Description = "Can update orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "UpdateOrders"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2828),
                            Description = "Can delete orders",
                            IsActive = true,
                            Module = "Orders",
                            Name = "DeleteOrders"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2829),
                            Description = "Admin can view all user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminReadUsers"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2830),
                            Description = "Admin can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminCreateUsers"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2831),
                            Description = "Admin can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminUpdateUsers"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2833),
                            Description = "Admin can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "AdminDeleteUsers"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2834),
                            Description = "Manager can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerReadUsers"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2835),
                            Description = "Manager can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerCreateUsers"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2837),
                            Description = "Manager can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerUpdateUsers"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2838),
                            Description = "Manager can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ManagerDeleteUsers"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2839),
                            Description = "CustomerSupport can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportReadUsers"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2840),
                            Description = "CustomerSupport can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportCreateUsers"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2841),
                            Description = "CustomerSupport can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportUpdateUsers"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2842),
                            Description = "CustomerSupport can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "CustomerSupportDeleteUsers"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2843),
                            Description = "Chemist can view user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistReadUsers"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2844),
                            Description = "Chemist can create users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistCreateUsers"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2845),
                            Description = "Chemist can update user information",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistUpdateUsers"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2847),
                            Description = "Chemist can delete users",
                            IsActive = true,
                            Module = "UserManagement",
                            Name = "ChemistDeleteUsers"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2848),
                            Description = "Can manage role permissions",
                            IsActive = true,
                            Module = "RoleManagement",
                            Name = "ManageRolePermission"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2849),
                            Description = "Can read chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistRead"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2850),
                            Description = "Can create chemist accounts",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistCreate"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2851),
                            Description = "Can update chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistUpdate"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2852),
                            Description = "Can delete chemist accounts",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "ChemistDelete"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2854),
                            Description = "Can read customer support information",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportRead"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2855),
                            Description = "Can create customer support accounts",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportCreate"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2856),
                            Description = "Can update customer support information",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportUpdate"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2857),
                            Description = "Can delete customer support accounts",
                            IsActive = true,
                            Module = "CustomerSupport",
                            Name = "CustomerSupportDelete"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2858),
                            Description = "Can read manager information",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportRead"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2859),
                            Description = "Can create manager accounts",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportCreate"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2860),
                            Description = "Can update manager information",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportUpdate"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2862),
                            Description = "Can delete manager accounts",
                            IsActive = true,
                            Module = "Manager",
                            Name = "ManagerSupportDelete"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2863),
                            Description = "Can read own customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerRead"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2864),
                            Description = "Can create customer accounts",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerCreate"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2865),
                            Description = "Can update own customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerUpdate"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2866),
                            Description = "Can delete own customer account",
                            IsActive = true,
                            Module = "Customer",
                            Name = "CustomerDelete"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2867),
                            Description = "Can read all customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerRead"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2868),
                            Description = "Can update any customer information",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerUpdate"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2869),
                            Description = "Can delete any customer account",
                            IsActive = true,
                            Module = "Customer",
                            Name = "AllCustomerDelete"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2870),
                            Description = "Can read all Chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistRead"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2871),
                            Description = "Can update any Chemist information",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistUpdate"
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(2872),
                            Description = "Can delete any Chemist account",
                            IsActive = true,
                            Module = "Chemist",
                            Name = "AllChemistDelete"
                        });
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GrantedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 1,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3245),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 2,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3247),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 3,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3248),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 4,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3249),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3250),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 6,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3251),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3252),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 8,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3253),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3254),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3255),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3256),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 12,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3257),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 13,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3258),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 14,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3259),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 15,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3259),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 16,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3260),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 17,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3261),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 18,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3262),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 19,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3263),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 20,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3264),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3265),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3266),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3268),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3269),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3270),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3271),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3271),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3272),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 29,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3273),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3274),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3275),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3276),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3277),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3277),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 35,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3278),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3279),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3280),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 38,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3281),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 39,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3282),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 40,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3283),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 41,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3284),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3286),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3286),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3287),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3288),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3289),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3290),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "11111111-1111-1111-1111-111111111111",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3291),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 1,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3292),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 3,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3292),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3293),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3294),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3297),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3298),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 17,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3300),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 18,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3301),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 19,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3301),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 20,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3302),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3303),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3304),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3305),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3306),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3307),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3309),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3310),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3311),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3312),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3313),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3316),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3317),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3318),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 35,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3319),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3320),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3321),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 38,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3321),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 40,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3322),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 41,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3323),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3324),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3325),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3325),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3326),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3327),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3328),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "22222222-2222-2222-2222-222222222222",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3329),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3329),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3330),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3332),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 21,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3333),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 22,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3333),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 23,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3334),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 24,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3335),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 25,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3336),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 26,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3337),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 27,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3338),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 28,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3338),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3339),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 31,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3340),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3341),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3342),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 34,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3342),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 36,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3343),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 37,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3344),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 46,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3345),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 47,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3346),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 48,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3346),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 43,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3347),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 49,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3348),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 50,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3370),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "33333333-3333-3333-3333-333333333333",
                            PermissionId = 51,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3371),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3372),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3373),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3373),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 42,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3374),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 44,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3376),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "44444444-4444-4444-4444-444444444444",
                            PermissionId = 45,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3376),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 5,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3377),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 6,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3378),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 7,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3379),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 8,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3380),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 9,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3381),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 10,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3382),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 11,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3383),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 12,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3384),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 30,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3385),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 32,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3386),
                            IsActive = true
                        },
                        new
                        {
                            RoleId = "55555555-5555-5555-5555-555555555555",
                            PermissionId = 33,
                            GrantedAt = new DateTime(2025, 10, 5, 17, 45, 27, 615, DateTimeKind.Utc).AddTicks(3386),
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            ConcurrencyStamp = "eb3b6bd2-e740-45bd-91b5-a5627c4ab27d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "22222222-2222-2222-2222-222222222222",
                            ConcurrencyStamp = "38424e1e-b8df-4484-bb7c-2b01feecebe4",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "33333333-3333-3333-3333-333333333333",
                            ConcurrencyStamp = "ff9cf118-d192-4c50-900c-8eb5c92d5288",
                            Name = "CustomerSupport",
                            NormalizedName = "CUSTOMERSUPPORT"
                        },
                        new
                        {
                            Id = "44444444-4444-4444-4444-444444444444",
                            ConcurrencyStamp = "8c8930a9-68c0-4849-a307-0f8be968d489",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "55555555-5555-5555-5555-555555555555",
                            ConcurrencyStamp = "79ec17b2-a6fc-4709-bfaf-71308fa70fd1",
                            Name = "Chemist",
                            NormalizedName = "CHEMIST"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.CustomerSupport", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Manager", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.MedicalStore", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicineDelivery.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MedicineDelivery.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MedicineDelivery.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
